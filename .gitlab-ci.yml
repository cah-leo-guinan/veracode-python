############################ Helper Anchors ###################################

.install_common_tools: &install_common_tools |
    apt-get update -yqq
    apt-get -qy install ssh git curl zip > /dev/null

.configure_git_repo: &configure_git_repo |
    export GIT_PROJECT_URL=\
    "git@${GIT_HOST}:${GIT_USER_NAME}/${CI_PROJECT_NAME}.git"
    export DOMAIN=$(echo ${GIT_PROJECT_URL} | cut -d\@ -f2 | cut -d\: -f1)
    umask 077
    mkdir -p ~/.ssh
    echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    ssh-keyscan -H $DOMAIN > ~/.ssh/known_hosts
    eval $(ssh-agent -s)
    ssh-add ~/.ssh/id_rsa

    git config user.name  ${GIT_USER_NAME}
    git config user.email ${GIT_USER_EMAIL}
    git remote rm origin
    git remote add origin ${GIT_PROJECT_URL}

.create_veracode_credentials: &create_veracode_credentials |
    mkdir ~/.veracode
    cat <<EOF> ~/.veracode/credentials
    [DEFAULT]
    VERACODE_API_ID = ${VERACODE_API_ID}
    VERACODE_API_SECRET = ${VERACODE_API_SECRET}
    EOF

################################# Set Up ######################################

variables:
    GIT_STRATEGY: clone

stages:
    - test
    - package
    - publish

############################## All Branches ###################################

Unit Test:
    stage: test

    tags:
        - python

    script: # Set up API credentials and run tests
        - *create_veracode_credentials
        - pip3 install -r cicd/requirements.txt
        - python3 tests.py

SCA Test:
    stage: test

    tags:
        - python

    script: 
        - *install_common_tools
        - curl -sSL https://download.sourceclear.com/ci.sh | bash 

SAST Sandbox Test:
    stage: test

    tags:
        - python

    script: 
        - *install_common_tools
        - *create_veracode_credentials

        - zip project.zip setup.* LICENCE.txt -r veracode/ 
        - pip3 install -e .

        - veracode-cli scan
            --app="${CI_PROJECT_NAME}"
            --name="$(date) - ${CI_COMMIT_SHORT_SHA}" 
            --sandbox='Development Build'
            --files='project.zip'
            --timeout=30

    except:
        - master

############################## Master Only ####################################

SAST Policy Test:
    stage: test

    tags:
        - python

    script: 
        - *install_common_tools
        - *create_veracode_credentials

        - zip project.zip setup.* LICENCE.txt -r veracode/ 
        - pip3 install -e .

        - veracode-cli scan
            --app="${CI_PROJECT_NAME}"
            --name="$(date) - ${CI_COMMIT_SHORT_SHA}" 
            --files='project.zip'
            --timeout=30

    only:
        - master

Create Release:
    stage: package
    tags:
        - python

    script:
        - *install_common_tools

        - export GIT_USER_NAME="chuck"
        - export GIT_USER_EMAIL="chuck@gitlab.mothership"
        - export GIT_HOST="gitlab.mothership"
        - export SSH_PRIVATE_KEY=${GITLAB_SSH_PRIVATE_KEY}
        - *configure_git_repo
        
        - git pull origin master
        - git checkout master
        - export RELEASE=$(git log -1 --pretty='format:%B' | cut -d':' -f1)
        - export VERSION=$(python3 setup.py -q version --increment ${RELEASE})
        - git add .
        - git commit -m "Release v${VERSION} [skip ci]"
        - git push origin master
        - git tag -a v${VERSION} -m "Release ${VERSION}"
        - git push origin v${VERSION}

    only: 
        - master 

Github Mirror: # mirror Github and use API to create release
    stage: publish
    tags:
        - python

    script:
        - *install_common_tools
        - git pull origin master
        - git checkout master

        - export GIT_USER_NAME="chuckorde"
        - export GIT_USER_EMAIL="chuckorde@gmail.com"
        - export GIT_HOST="github.com"
        - export SSH_PRIVATE_KEY=${GITHUB_SSH_PRIVATE_KEY}
        - *configure_git_repo

        - git push -u origin master --force
        - pip3 install requests # needed for github release
        - python3 setup.py github --create-release ${GITHUB_API_TOKEN}

    only: 
        - master 
 
Publish to PyPi: # publish on PyPi
    stage: publish
    tags: 
        - python

    script:
        - *install_common_tools
        - git pull origin master
        - git checkout master
        - rm -rf dist
        - pip3 install twine
        - python3 setup.py sdist
        - twine upload -u ${TWINE_USERNAME} -p ${TWINE_PASSWORD} dist/*

    only: 
        - master 

